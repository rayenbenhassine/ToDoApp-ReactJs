{"version":3,"sources":["Components/Todo.js","Components/ToDoList.js","Components/ToDoPanel.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","todo","checked","inputChecked","setInputChecked","style","background","color","className","id","type","onClick","e","newTodos","todos","setTodos","localStorage","setItem","JSON","stringify","text","ToDoList","console","log","listStyle","padding","margin","map","ToDoPanel","setText","value","onChange","target","required","push","setErrorMsg","App","errorMsg","useEffect","getItem","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAkCeA,MA/Bf,SAAcC,GACV,MAAsCC,mBAASD,EAAME,KAAKC,SAA1D,mBAAKC,EAAL,KAAmBC,EAAnB,KACA,OACI,mCACI,qBAAIC,MAAOF,EAAa,CAACG,WAAa,UAAUC,MAAQ,SAAS,CAACD,WAAa,SAAUE,UAAU,gBAAgBC,GAAIV,EAAMU,GAA7H,UACI,uBACAD,UAAU,WACVE,KAAK,WACLC,QAAS,SAACC,GACN,GAAGT,EAAa,CACZC,GAAgB,GAChB,IAAIS,EAAQ,YAAOd,EAAMe,OACzBD,EAASd,EAAMU,IAAIP,SAAU,EAC7BH,EAAMgB,SAASF,GACfG,aAAaC,QAAQ,QAAQC,KAAKC,UAAUN,QAE5C,CACAT,GAAgB,GAChB,IAAIS,EAAQ,YAAOd,EAAMe,OACzBD,EAASd,EAAMU,IAAIP,SAAU,EAC7BH,EAAMgB,SAASF,GACfG,aAAaC,QAAQ,QAAQC,KAAKC,UAAUN,MAGpDX,QAASC,IACT,sBAAMK,UAAU,WAAhB,SAA4BT,EAAME,KAAKmB,aCjBxCC,MAVf,SAAkBtB,GAEd,OADAuB,QAAQC,IAAIxB,EAAMe,OAEd,oBAAIT,MAAO,CAACmB,UAAY,OAAQC,QAAU,MAAOC,OAAS,OAA1D,SAEQ3B,EAAMe,MAAMa,KAAI,SAAC1B,EAAMQ,GAAP,OAAY,cAAC,EAAD,CAAMA,GAAIA,EAAIR,KAAMA,EAAMa,MAAOf,EAAMe,MAAOC,SAAUhB,EAAMgB,iB,MC+B3Fa,MAnCf,SAAmB7B,GACf,MAAuBC,mBAAS,IAAhC,mBAAOoB,EAAP,KAAYS,EAAZ,KACA,OACI,qCACI,uBAAOrB,UAAU,YAAYE,KAAK,OAClCoB,MAAO/B,EAAMqB,KACbW,SACI,SAACnB,GACGiB,EAAQjB,EAAEoB,OAAOF,QAGzBG,UAAQ,IACR,uBACA,wBAAQzB,UAAU,SAASG,QACvB,WACI,GAAW,IAARS,EAAW,CACV,IAAInB,EAAO,CACPmB,KAAOA,EACPlB,SAAU,GAEVW,EAAQ,YAAOd,EAAMe,OACzBD,EAASqB,KAAKjC,GACdF,EAAMgB,SAASF,GACfG,aAAaC,QAAQ,QAAQC,KAAKC,UAAUN,IAC5Cd,EAAMoC,YAAY,SAGlBpC,EAAMoC,YAAY,uBAd9B,yBCcGC,MAvBf,WACE,MAAwBpC,mBAAS,IAAjC,mBAAKc,EAAL,KAAYC,EAAZ,KACA,EAA8Bf,mBAAS,IAAvC,mBAAKqC,EAAL,KAAeF,EAAf,KASA,OAPAG,qBAAU,WAC4B,MAAjCtB,aAAauB,QAAQ,UACtBvB,aAAaC,QAAQ,QAAQC,KAAKC,UAAUL,IAC9CC,EAASG,KAAKsB,MAAMxB,aAAauB,QAAQ,aACzC,IAIA,qBAAK/B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,sBACA,cAAC,EAAD,CAAWM,MAAOA,EAAOC,SAAUA,EAAUoB,YAAaA,IAC1D,sBAAM3B,UAAU,WAAhB,SAA4B6B,IAC5B,cAAC,EAAD,CAAUvB,MAAOA,EAAOC,SAAUA,UCX3B0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6070eb1a.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport '../Css/Todo.css'\r\n\r\nfunction Todo(props){\r\n    let [inputChecked, setInputChecked] = useState(props.todo.checked)\r\n    return(\r\n        <>\r\n            <li style={inputChecked?{background : \"#A9A9A9\",color : \"white\"}:{background : \"white\"}} className=\"todoContainer\" id={props.id}>\r\n                <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\" \r\n                onClick={(e)=>{\r\n                    if(inputChecked){\r\n                        setInputChecked(false)\r\n                        let newTodos = [...props.todos]\r\n                        newTodos[props.id].checked = false\r\n                        props.setTodos(newTodos)\r\n                        localStorage.setItem(\"todos\",JSON.stringify(newTodos));\r\n                    }\r\n                    else{\r\n                        setInputChecked(true)\r\n                        let newTodos = [...props.todos]\r\n                        newTodos[props.id].checked = true\r\n                        props.setTodos(newTodos)\r\n                        localStorage.setItem(\"todos\",JSON.stringify(newTodos));\r\n                    }\r\n                }}\r\n                checked={inputChecked}/>\r\n                <span className=\"todoText\">{props.todo.text}</span>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo;","import Todo from \"./Todo\"\r\nfunction ToDoList(props){\r\n    console.log(props.todos)\r\n    return(\r\n        <ul style={{listStyle : \"none\", padding : \"0px\", margin : \"0px\"}}>\r\n            {\r\n                props.todos.map((todo, id)=><Todo id={id} todo={todo} todos={props.todos} setTodos={props.setTodos}/>)\r\n            }\r\n        </ul>\r\n    )\r\n}\r\nexport default ToDoList;","import {useState } from 'react';\r\nimport '../Css/ToDoPanel.css'\r\nfunction ToDoPanel(props){\r\n    const [text,setText] = useState('')\r\n    return(\r\n        <>\r\n            <input className=\"inputTodo\" type=\"text\" \r\n            value={props.text} \r\n            onChange={\r\n                (e) => {\r\n                    setText(e.target.value)\r\n                }\r\n            }\r\n            required/>\r\n            <br/>\r\n            <button className=\"btnAdd\" onClick={\r\n                () => {\r\n                    if(text != \"\"){\r\n                        let todo = {\r\n                            text : text,\r\n                            checked : false\r\n                        }\r\n                        let newTodos = [...props.todos]\r\n                        newTodos.push(todo)\r\n                        props.setTodos(newTodos)\r\n                        localStorage.setItem(\"todos\",JSON.stringify(newTodos));\r\n                        props.setErrorMsg(\"\");\r\n                    }\r\n                    else{\r\n                        props.setErrorMsg(\"Please type a todo\");\r\n                    }\r\n                }\r\n            }>Valider</button>\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default ToDoPanel;","import {useState } from 'react';\nimport { useEffect } from 'react/cjs/react.development';\nimport './App.css';\nimport ToDoList from './Components/ToDoList';\nimport ToDoPanel from './Components/ToDoPanel';\n\nfunction App() {\n  let [todos, setTodos] = useState([])\n  let [errorMsg, setErrorMsg] = useState(\"\")\n\n  useEffect(()=>{\n    if(localStorage.getItem(\"todos\") == null)\n      localStorage.setItem(\"todos\",JSON.stringify(todos));\n    setTodos(JSON.parse(localStorage.getItem('todos')));\n  },[])\n\n \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"title\">My Todos</h1>\n        <ToDoPanel todos={todos} setTodos={setTodos} setErrorMsg={setErrorMsg}/>\n        <span className=\"errorMsg\">{errorMsg}</span>\n        <ToDoList todos={todos} setTodos={setTodos}/> \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}